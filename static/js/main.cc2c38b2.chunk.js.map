{"version":3,"sources":["components/fork/index.js","components/highlighter/index.js","components/header/index.js","redux-constants/fetch.js","utils/params.js","actions/bioNlp.js","components/input-with-examples/example-select.js","containers/example-select.js","components/input-with-examples/example-text.js","containers/example-text.js","components/input-with-examples/submit.js","containers/submit.js","components/input-with-examples/index.js","pages/home/index.js","reducers/bioNlp.js","reducers/index.js","serviceWorker.js","index.js"],"names":["GithubForkWrapper","styled","a","_templateObject","GithubFork","react_default","createElement","target","href","this","props","className","React","PureComponent","Highlighter","span","highlighter_templateObject","color","bgColor","Header","Typography","header_templateObject","redux_constants_fetch","params","arguments","length","undefined","Object","keys","reduce","queryString","key","index","window","encodeURIComponent","fetchBioNlp","_ref","asyncToGenerator","regenerator_default","mark","_callee","dispatch","getState","payload","response","wrap","_context","prev","next","type","constants","bioNlp","request","fetch","concat","process","console","log","error","stop","_x","_x2","apply","updateBioNlp","text","content","examples","ExampleSelect","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","event","setState","value","labelRef","createRef","FormControl_default","variant","style","width","RootRef_default","rootRef","InputLabel_default","whiteSpace","htmlFor","Select_default","onChange","input","OutlinedInput_default","notched","labelWidth","name","id","MenuItem_default","map","example","i","Component","connect","bindActionCreators","ExampleText","TextField_default","margin","placeholder","fullWidth","multiline","Submit","Button_default","onClick","fetchData","InputWithExamples","Grid_default","container","flexGrow","justify","alignItems","spacing","item","xs","example_select","example_text","textAlign","containers_submit","App","padding","fork_GithubFork","direction","gutterBottom","component","Typography_default","Card_default","CardContent_default","input_with_examples_InputWithExamples","initialState","bionlp3g","loading","combineReducers","action","immutatedState","objectSpread","assign","Boolean","location","hostname","match","require","config","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducers","applyMiddleware","thunk","ReactDOM","render","es","pages_home","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc2c38b2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst GithubForkWrapper = styled.a`\n  position: fixed;\n  top: 0;\n  right: 0;\n  z-index: 1000;\n  margin: 10px;\n  text-decoration: none;\n  font-size: 30px;\n  color: rgba(0, 0, 0, 0.5);\n  cursor: pointer;\n\n  &:focus {\n    outline: none;\n  }\n\n  &:hover, &:focus {\n    color: rgba(0, 0, 0, 0.8);\n  }\n`;\n\nexport default class GithubFork extends React.PureComponent {\n  static propTypes = {\n    href: PropTypes.string.isRequired\n  };\n\n  render () {\n    return <GithubForkWrapper target='_blank' href={this.props.href}>\n      <i className='fab fa-github'></i>\n    </GithubForkWrapper>\n  }\n}\n\n","import styled from 'styled-components';\n\nexport const Highlighter = styled.span`\n  color: ${props => props.color};\n  border-radius: 5px;\n  background-color: ${props => props.bgColor ? props.bgColor : 'transparent'}\n`;\n","import styled from 'styled-components';\nimport Typography from '@material-ui/core/Typography';\n\nexport const Header = styled(Typography)`\n  color: ${props => props.color ? props.color: '#4f4f4f'} !important;\n`;\n","export default {\n  FETCH_BIO_NLP_REQUEST: 'FETCH_BIO_NLP_REQUEST',\n  FETCH_BIO_NLP_SUCCESS: 'FETCH_BIO_NLP_SUCCESS',\n  FETCH_BIO_NLP_FAILURE: 'FETCH_BIO_NLP_FAILURE',\n  UPDATE_BIO_NLP: 'UPDATE_BIO_NLP',\n}\n","export default (params = {}) => {\n  return Object.keys(params).reduce((queryString, key, index) => {\n    queryString += (index !== 0 ? '&' : '') + window.encodeURIComponent(key) + '=' + window.encodeURIComponent(params[key]);\n    return queryString;\n  }, '');\n}\n","import constants from '../redux-constants/fetch';\nimport params from '../utils/params';\n\nexport const fetchBioNlp = () => async (dispatch, getState) => {\n  dispatch({\n    type: constants.FETCH_BIO_NLP_REQUEST\n  })\n\n  const payload =  params(getState().bioNlp.request);\n\n  try {\n    const response = fetch(`${process.env.REACT_APP_DEV_API_URL}/extract-ner?${payload}`);\n    console.log(response);\n  } catch (error) {\n\n  }\n}\n\nexport const updateBioNlp = text => {\n  return {\n    type: constants.UPDATE_BIO_NLP,\n    content: text\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport RootRef from '@material-ui/core/RootRef';\n\nconst examples = [\n  'AllenNLP is a PyTorch-based natural language processing library developed at the Allen Institute for Artificial Intelligence in Seattle.',\n  'Did Uriah honestly think he could beat The Legend of Zelda in under three hours?',\n  'Michael Jordan is a professor at Berkeley.',\n  \"My preferred candidate is Cary Moon, but she won't be the next mayor of Seattle.\",\n  'If you like Paul McCartney you should listen to the first Wings album.',\n  'If you like Paul McCartney you should listen to the first Wings album.'\n]\n\nexport default class ExampleSelect extends React.Component {\n  static propTypes = {\n    updateBioNlp: PropTypes.func.isRequired\n  };\n\n  state = {\n    content: ''\n  }\n\n  constructor(props) {\n    super(props);\n    this.labelRef = React.createRef();\n  }\n\n\n  handleChange = event => {\n    this.setState({\n      content: event.target.value\n    })\n    this.props.updateBioNlp && this.props.updateBioNlp(event.target.value);\n  };\n\n  render () {\n    return (\n      <FormControl variant=\"outlined\" style={{ width: '100%' }}>\n        <RootRef rootRef={this.labelRef}>\n          <InputLabel\n            style={{ whiteSpace: 'nowrap' }}\n            htmlFor=\"outlined-example\"\n          >\n            Example Texts\n          </InputLabel>\n        </RootRef>\n        <Select\n          value={this.state.content}\n          onChange={this.handleChange}\n          input={\n            <OutlinedInput\n              notched\n              labelWidth={110}\n              name=\"example\"\n              id=\"outlined-example\"\n            />\n          }\n        >\n          <MenuItem value=\"\"><em>--</em></MenuItem>\n          {\n            examples.map((example, i) => (\n              <MenuItem key={i} value={example}>{example}</MenuItem>\n            ))\n          }\n        </Select>\n      </FormControl>\n    );\n  }\n}\n","import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { updateBioNlp } from '../actions/bioNlp';\nimport ExampleSelect from '../components/input-with-examples/example-select';\n\nconst mapStateToProps = state => {\n  return {\n    content: state.bioNlp.request.text\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    updateBioNlp\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExampleSelect);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\n\nexport default class ExampleText extends React.Component {\n  static propTypes = {\n    content: PropTypes.string,\n    updateBioNlp: PropTypes.func.isRequired\n  }\n\n  handleChange = event => {\n    this.props.updateBioNlp(event.target.value);\n  }\n\n  render () {\n    return (\n      <TextField\n        id=\"standard-full-width\"\n        style={{ margin: 0 }}\n        placeholder=\"Placeholder\"\n        fullWidth\n        margin=\"normal\"\n        onChange={this.handleChange}\n        value={this.props.content}\n        multiline\n      />\n    )\n  }\n}\n","import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { updateBioNlp } from '../actions/bioNlp';\nimport ExampleText from '../components/input-with-examples/example-text';\n\nconst mapStateToProps = state => {\n  return {\n    content: state.bioNlp.request.text\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    updateBioNlp\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExampleText);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\n\nconst Submit = (props) => {\n  return (\n    <Button variant=\"contained\" color=\"primary\" onClick={props.fetchData}>\n      Submit\n    </Button>\n  )\n}\n\nSubmit.propTypes = {\n  fetchData: PropTypes.func.isRequired\n}\n\nexport default Submit;\n","import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { fetchBioNlp } from '../actions/bioNlp';\nimport Submit from '../components/input-with-examples/submit';\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    fetchData: fetchBioNlp\n  }, dispatch);\n}\n\nexport default connect(null, mapDispatchToProps)(Submit);\n","import React from 'react';\nimport ExampleSelect from '../../containers/example-select';\nimport ExampleText from '../../containers/example-text';\nimport Submit from '../../containers/submit';\nimport Grid from '@material-ui/core/Grid';\n\nexport default class InputWithExamples extends React.PureComponent {\n  render () {\n    return (\n      <Grid container style={{ margin: '24px -12px -12px', flexGrow: 0, width: '100%' }} justify='center' alignItems='center' spacing={24}>\n        <Grid item xs={2}><ExampleSelect /></Grid>\n        <Grid item xs={7}><ExampleText /></Grid>\n        <Grid item xs={1} style={{ textAlign: 'right' }}>\n          <Submit />\n        </Grid>\n      </Grid>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport GithubFork from '../../components/fork';\nimport { Highlighter } from '../../components/highlighter';\nimport { Header } from '../../components/header';\nimport InputWithExamples from '../../components/input-with-examples';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport './index.css';\n\nclass App extends Component {\n  render() {\n    console.log(process.env.REACT_APP_DEV_API_URL);\n    return (\n      <div className='main-wrapper' style={{ padding: '48px 12px' }}>\n        <GithubFork href='https://github.com/MeRajat/SolvingAlmostAnythingWithBert' />\n        <Grid container justify='center' alignItems='center' direction='column' spacing={24}>\n          <Grid item xs={6}>\n            <Header color='#827717' gutterBottom variant=\"h3\" component=\"h1\">\n              BioBert Pytorch\n            </Header>\n            <Typography gutterBottom component=\"p\">\n              This App finds <b><Highlighter color='#455a64'>Named Entity Recognition</Highlighter></b> (NER)\n            </Typography>\n          </Grid>\n          <Grid item xs={10}>\n            <Card>\n              <CardContent>\n                <Header color='#9e9d24' gutterBottom variant=\"h5\" component=\"h2\">\n                  Named Entity Recognition\n                </Header>\n                <Typography component=\"p\">\n                  The named entity recognition model identifies named entities (people, locations, organizations, and miscellaneous) in the input text. This model is the \"baseline\" model described in Peters, Ammar, Bhagavatula, and Power 2017 . It uses a Gated Recurrent Unit (GRU) character encoder as well as a GRU phrase encoder, and it starts with pretrained GloVe vectors for its token embeddings. It was trained on the CoNLL-2003 NER dataset. It is not state of the art on that task, but it's not terrible either. (This is also the model constructed in our Creating a Model tutorial.)\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <InputWithExamples />\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import constants from '../redux-constants/fetch';\n\nconst initialState = {\n  response: {},\n  request: {\n    bionlp3g: 'BIO NLP 13CG',\n    text: ''\n  },\n  loading: false,\n  error: null\n}\n\nexport default (state = initialState, action) => {\n  const immutatedState = { ...state };\n  switch (action.type) {\n    case constants.FETCH_BIO_NLP_REQUEST:\n      immutatedState.loading = true;\n      return immutatedState;\n    case constants.FETCH_BIO_NLP_SUCCESS:\n      immutatedState.response = Object.assign({}, action.response);\n      immutatedState.loading = false;\n      immutatedState.error = null;\n      return immutatedState;\n    case constants.FETCH_BIO_NLP_FAILURE:\n      immutatedState.loading = false;\n      immutatedState.error = { ...action.error };\n      return immutatedState;\n    case constants.UPDATE_BIO_NLP:\n      immutatedState.request = {...state.request};\n      immutatedState.request.text = action.content;\n      console.log(immutatedState);\n      return immutatedState;\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport bioNlp from './bioNlp';\n\nexport default combineReducers({\n  bioNlp\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/home';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport rootReducers from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nrequire('dotenv').config();\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst store = createStore(rootReducers, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}